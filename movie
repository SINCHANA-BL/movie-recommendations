TITLE OF PROJECT:

MOVIE RECOMMENDATION SYSTEM ðŸŽ¥
Objective
Recommender System is a system that seeks to predict or filter preferences according to the user's choices. Recommender systems are utilized in a variety of areas including movies, music, news, books, research articles, search queries, social tags, and products in general.

Recommender systems produce a list of recommendations in any of the two ways:

Collaborative filtering: Collaborative filtering approaches build a model from the user's past behavior (e. Items purchased or searched by the user) as well as similar decisions made by other users. This model is then used to predict items (or ratings for items) that users may have an interest in.

Content-based filtering: Content-based filtering approaches uses a series of discrete characteristics of an item in order to recommend additional items with similar properties. Content-based filtering methods are totally based on a description of the item and a profile of the user's preferences. It recommends items based on the user's past preferences.

Let's develop a basic recommendation system using Python and Pandas. Let's develop a basic recommendation system by suggesting items that are most similar to a particular item, in this case, movies. It just tells what movies/items are most similar to the user's movie choice.

Import Library

import pandas as pd
     

import numpy as np
     
Import Data

data = pd.read_csv('https://github.com/YBIFoundation/Dataset/raw/main/Movies%20Recommendation.csv')
     
Describe Data

data.head()
     
Movie_ID	Movie_Title	Movie_Genre	Movie_Language	Movie_Budget	Movie_Popularity	Movie_Release_Date	Movie_Revenue	Movie_Runtime	Movie_Vote	...	Movie_Homepage	Movie_Keywords	Movie_Overview	Movie_Production_House	Movie_Production_Country	Movie_Spoken_Language	Movie_Tagline	Movie_Cast	Movie_Crew	Movie_Director
0	1	Four Rooms	Crime Comedy	en	4000000	22.876230	09-12-1995	4300000	98.0	6.5	...	NaN	hotel new year's eve witch bet hotel room	It's Ted the Bellhop's first night on the job....	[{"name": "Miramax Films", "id": 14}, {"name":...	[{"iso_3166_1": "US", "name": "United States o...	[{"iso_639_1": "en", "name": "English"}]	Twelve outrageous guests. Four scandalous requ...	Tim Roth Antonio Banderas Jennifer Beals Madon...	[{'name': 'Allison Anders', 'gender': 1, 'depa...	Allison Anders
1	2	Star Wars	Adventure Action Science Fiction	en	11000000	126.393695	25-05-1977	775398007	121.0	8.1	...	http://www.starwars.com/films/star-wars-episod...	android galaxy hermit death star lightsaber	Princess Leia is captured and held hostage by ...	[{"name": "Lucasfilm", "id": 1}, {"name": "Twe...	[{"iso_3166_1": "US", "name": "United States o...	[{"iso_639_1": "en", "name": "English"}]	A long time ago in a galaxy far, far away...	Mark Hamill Harrison Ford Carrie Fisher Peter ...	[{'name': 'George Lucas', 'gender': 2, 'depart...	George Lucas
2	3	Finding Nemo	Animation Family	en	94000000	85.688789	30-05-2003	940335536	100.0	7.6	...	http://movies.disney.com/finding-nemo	father son relationship harbor underwater fish...	Nemo, an adventurous young clownfish, is unexp...	[{"name": "Pixar Animation Studios", "id": 3}]	[{"iso_3166_1": "US", "name": "United States o...	[{"iso_639_1": "en", "name": "English"}]	There are 3.7 trillion fish in the ocean, they...	Albert Brooks Ellen DeGeneres Alexander Gould ...	[{'name': 'Andrew Stanton', 'gender': 2, 'depa...	Andrew Stanton
3	4	Forrest Gump	Comedy Drama Romance	en	55000000	138.133331	06-07-1994	677945399	142.0	8.2	...	NaN	vietnam veteran hippie mentally disabled runni...	A man with a low IQ has accomplished great thi...	[{"name": "Paramount Pictures", "id": 4}]	[{"iso_3166_1": "US", "name": "United States o...	[{"iso_639_1": "en", "name": "English"}]	The world will never be the same, once you've ...	Tom Hanks Robin Wright Gary Sinise Mykelti Wil...	[{'name': 'Alan Silvestri', 'gender': 2, 'depa...	Robert Zemeckis
4	5	American Beauty	Drama	en	15000000	80.878605	15-09-1999	356296601	122.0	7.9	...	http://www.dreamworks.com/ab/	male nudity female nudity adultery midlife cri...	Lester Burnham, a depressed suburban father in...	[{"name": "DreamWorks SKG", "id": 27}, {"name"...	[{"iso_3166_1": "US", "name": "United States o...	[{"iso_639_1": "en", "name": "English"}]	Look closer.	Kevin Spacey Annette Bening Thora Birch Wes Be...	[{'name': 'Thomas Newman', 'gender': 2, 'depar...	Sam Mendes
5 rows Ã— 21 columns


data.describe()
     
Movie_ID	Movie_Budget	Movie_Popularity	Movie_Revenue	Movie_Runtime	Movie_Vote	Movie_Vote_Count
count	4760.000000	4.760000e+03	4760.000000	4.760000e+03	4758.000000	4760.000000	4760.000000
mean	2382.566387	2.920129e+07	21.599510	8.263743e+07	107.184111	6.113866	692.508403
std	1377.270159	4.075620e+07	31.887919	1.630554e+08	21.960332	1.141294	1235.007337
min	1.000000	0.000000e+00	0.000372	0.000000e+00	0.000000	0.000000	0.000000
25%	1190.750000	9.257500e+05	4.807074	0.000000e+00	94.000000	5.600000	55.000000
50%	2380.500000	1.500000e+07	13.119058	1.944716e+07	104.000000	6.200000	238.000000
75%	3572.250000	4.000000e+07	28.411929	9.341276e+07	118.000000	6.800000	740.250000
max	4788.000000	3.800000e+08	875.581305	2.787965e+09	338.000000	10.000000	13752.000000

data.info()
     
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 4760 entries, 0 to 4759
Data columns (total 21 columns):
 #   Column                    Non-Null Count  Dtype  
---  ------                    --------------  -----  
 0   Movie_ID                  4760 non-null   int64  
 1   Movie_Title               4760 non-null   object 
 2   Movie_Genre               4760 non-null   object 
 3   Movie_Language            4760 non-null   object 
 4   Movie_Budget              4760 non-null   int64  
 5   Movie_Popularity          4760 non-null   float64
 6   Movie_Release_Date        4760 non-null   object 
 7   Movie_Revenue             4760 non-null   int64  
 8   Movie_Runtime             4758 non-null   float64
 9   Movie_Vote                4760 non-null   float64
 10  Movie_Vote_Count          4760 non-null   int64  
 11  Movie_Homepage            1699 non-null   object 
 12  Movie_Keywords            4373 non-null   object 
 13  Movie_Overview            4757 non-null   object 
 14  Movie_Production_House    4760 non-null   object 
 15  Movie_Production_Country  4760 non-null   object 
 16  Movie_Spoken_Language     4760 non-null   object 
 17  Movie_Tagline             3942 non-null   object 
 18  Movie_Cast                4733 non-null   object 
 19  Movie_Crew                4760 non-null   object 
 20  Movie_Director            4738 non-null   object 
dtypes: float64(3), int64(4), object(14)
memory usage: 781.1+ KB

data.columns
     
Index(['Movie_ID', 'Movie_Title', 'Movie_Genre', 'Movie_Language',
       'Movie_Budget', 'Movie_Popularity', 'Movie_Release_Date',
       'Movie_Revenue', 'Movie_Runtime', 'Movie_Vote', 'Movie_Vote_Count',
       'Movie_Homepage', 'Movie_Keywords', 'Movie_Overview',
       'Movie_Production_House', 'Movie_Production_Country',
       'Movie_Spoken_Language', 'Movie_Tagline', 'Movie_Cast', 'Movie_Crew',
       'Movie_Director'],
      dtype='object')
Data Preprocessing

data.isna().sum()
     
Define Target Variable (y) and Feature Variables (X)

data_features = data[['Movie_Genre','Movie_Keywords','Movie_Tagline','Movie_Cast','Movie_Director']].fillna('')
data_features.shape
     
(4760, 5)

data_features
     

X = data_features['Movie_Genre'] +' '+ data_features['Movie_Tagline'] +' '+ data_features['Movie_Keywords'] +' '+ data_features['Movie_Director'] +' '+ data_features['Movie_Cast']
X.shape
     
(4760,)

from sklearn.feature_extraction.text import TfidfVectorizer
tfidf = TfidfVectorizer()
     

X = tfidf.fit_transform(X)
     

X.shape
     
(4760, 17258)

print(X)
     
Modeling

from sklearn.metrics.pairwise import cosine_similarity
     

similarity_score = cosine_similarity(X)
similarity_score
     

similarity_score.shape
     
(4760, 4760)
Prediction

movie = input("enter title of your favourite movie: ")
     
enter title of your favourite movie: avtaar

movie_titles_list = data['Movie_Title'].tolist()
     

import difflib
     

movie_recommendation = difflib.get_close_matches(movie, movie_titles_list)
print(movie_recommendation)
     
['Avatar', 'Gattaca']

close_match = movie_recommendation[0]
index_close_match = data[data.Movie_Title == close_match]['Movie_ID'].values[0]
     

rec_score = list(enumerate(similarity_score[index_close_match]))
print(rec_score)
     

sorted_similar_movies = sorted(rec_score, key = lambda x: x[1], reverse = True)
     

n = int(input("enter no of movies to suggest: "))
     
enter no of movies to suggest: 25

print("top",n,"recommended movies for you: ")
i = 1
for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = data[data.Movie_ID == index]['Movie_Title'].values
  if i < n+1:
    print(i,")",title_from_index)
    i+=1
     
top 25 recommended movies for you: 
1 ) ['Avatar']
2 ) ['The Girl on the Train']
3 ) ['Act of Valor']
4 ) ['Donnie Darko']
5 ) ['Precious']
6 ) ['Freaky Friday']
7 ) ['The Opposite Sex']
8 ) ['Heaven is for Real']
9 ) ['Run Lola Run']
10 ) ['Elizabethtown']
11 ) ['The Godfather']
12 ) ['Gerry']
13 ) ['New Nightmare']
14 ) ['Bright Lights, Big City']
15 ) ['Jumper']
16 ) ['The Purge: Anarchy']
17 ) ['A Prairie Home Companion']
18 ) ['Rollerball']
19 ) ['The Change-Up']
20 ) ['Cradle Will Rock']
21 ) ['Supporting Characters']
22 ) ['Police Academy: Mission to Moscow']
23 ) ['The Dangerous Lives of Altar Boys']
24 ) ['Mrs. Winterbourne']
25 ) ['Despicable Me 2']
Explaination
Import Data: loads movie data from a CSV file hosted on GitHub using the pandas library.

Data Preprocessing: concatenates various text features (such as genre, keywords, tagline, cast, and director) into a single text column and handles missing values.

Text Vectorization: the TF-IDF vectorization technique is used to convert the text data into numerical features. These numerical features represent the importance of words in each movie's description.

Model Evaluation: computes cosine similarity between all pairs of movies based on their TF-IDF vectors, creating a similarity score matrix.

User Input and Recommendations: The user is prompted to input their favorite movie title. The code then finds the closest match to this input, calculates the similarity scores between this movie and all others, and suggests the top recommended movies based on similarity.

In summary, TF-IDF vectorization and cosine similarity are used to suggest movies similar to a user's favorite movie based on textual features.
